/**
* Unit Test runner
* 
*/

.include "src/class/unit_test/unit_test.h"
.section "unit_test"

  METHOD init
  jsr _testObject
  bcs +
	pea 3
    TRIGGER_ERROR E_UnitTestFail

+ jsr _testSelf
  bcs +
	pea 4
    TRIGGER_ERROR E_UnitTestFail

+ jsr _testIterator
  bcs +
	pea 5
    TRIGGER_ERROR E_UnitTestFail

+ jsr _testScreen
  bcs +
	pea 6
    TRIGGER_ERROR E_UnitTestFail

+ jsr _testPause
  bcs +
    pea 7
    TRIGGER_ERROR E_UnitTestFail

+ jsr _testMultiplication
  bcs +
    pea 8
    TRIGGER_ERROR E_UnitTestFail

+ jsr _testDivision
  bcs +
    pea 9
    TRIGGER_ERROR E_UnitTestFail

+ jsr _testModulo
  bcs +
    pea 10
    TRIGGER_ERROR E_UnitTestFail

+
  jsr _testObject.extend
  bcs +
  pea 11
    TRIGGER_ERROR E_UnitTestFail

+
  jsr _testObject.try
  bcs +
  pea 12
    TRIGGER_ERROR E_UnitTestFail

+
  jsr _testObject.extend.try
  bcs +
  pea 13
    TRIGGER_ERROR E_UnitTestFail

+
  rts

/**
* set this.selfTest
*/
  METHOD setSelf
  sta.b this.selfTest
  rts

/**
* test if iterator.self actually points to itself and if methods can be invoked on it
*/
_testSelf:
  AX16
  lda.b iterator.self
  lda.b iterator.self+2
  lda.w #$5555
  sta.b this.selfTest
  lda.w #$aaaa
  CALL Unit_test.setSelf.MTD iterator.self

  lda.b this.selfTest
  cmp.w #$aaaa
  bne +

	sec
	rts

+ clc
  rts

  
_testMultiplication:
  AX16
  lda #0
  ldx #0
  jsr core.math.mul
  cmp #0
  bne +
  cpx #0
  bne +

  lda #$2
  ldx #$3
  jsr core.math.mul
  cmp #$0006
  bne +
  cpx #$0000
  bne +

  lda #$ffff
  ldx #$ffff
  jsr core.math.mul
  cmp #$0001
  bne +
  cpx #$fffe
  bne +
  
  sec
  rts
  
+
  clc
  rts
  
_testDivision:
  AX16
  ldx #1
  lda #1
  jsr core.math.div
  cmp #1
  bne +
  cpx #0
  bne +
  
  ldx #$ffff
  lda #$ffff
  jsr core.math.div
  cmp #$0001
  bne +
  cpx #$0000
  bne +

  ldx #$ffff
  lda #$6
  jsr core.math.div
  cmp #$2aaa
  bne +
  cpx #$0003
  bne +  
  
  sec
  rts
  
+
  clc
  rts
  
_testModulo:
  AX16
  lda #50
  ldx #44
  jsr core.math.mod
  cmp #72
  bne +
  cpx #0
  bne +

  lda #3  
  ldx #6
  jsr core.math.mod
  cmp #3
  bne +
  cpx #18
  bne +
  
  sec
  rts
  
+
  clc
  rts

  rts
  
/**
* test if iterator actually finds something
*/
_testIterator:
  AX16
  NEW Iterator_test.CLS.PTR hashPtr.2
  NEW Iterator_test.CLS.PTR hashPtr.3

  ;make sure deleted objects are not found
  NEW Iterator_test.CLS.PTR hashPtr.4
  CALL Iterator_test.kill.MTD hashPtr.4

  ;test if newly-created objects are found and if methods can be invoked on them
  jsr iterator.library.reset
-	lda.w #(OBJECT.PROPERTIES.isUnitTest | OBJECT.PROPERTIES.isLifeform)
	jsl extern.iterator.each.byProperties
	bcc +
	CALL Iterator_test.badeaffe.MTD iterator.target
	bra -

+
  lda.b iterator.count
  cmp.w #2
  bne _testIteratorFail

  ;test if self is found aswell
  jsr iterator.library.reset
-	lda.w #OBJECT.PROPERTIES.isUnitTest
	jsl extern.iterator.each.byProperties
	bcs -

  lda.b iterator.count
  cmp.w #3
  bne _testIteratorFail

  ;test if self-exclude of iterator.others works
  jsr iterator.library.reset
-	lda.w #OBJECT.PROPERTIES.isUnitTest
	jsr iterator.library.others
	bcs -

  lda.b iterator.count
  cmp.w #2
  bne _testIteratorFail

  ;test dynamic property setting
  jsr iterator.library.reset
  lda.w #OBJECT.PROPERTIES.isLifeform
  jsl extern.iterator.each.byProperties
  bcc +
	lda.w #OBJECT.PROPERTIES.isCollidable
	CALL Iterator_test.setProperties.MTD iterator.target

+ jsr iterator.library.reset
-	lda.w #(OBJECT.PROPERTIES.isLifeform | OBJECT.PROPERTIES.isCollidable)
	jsl extern.iterator.each.byProperties
	bcs -
  lda.b iterator.count
  cmp.w #1
  bne _testIteratorFail

  CALL Iterator_test.kill.MTD hashPtr.2
  CALL Iterator_test.kill.MTD hashPtr.3

  sec
  rts

_testIteratorFail:
  clc
  rts


_testObject:
  AX16
  pea 6
  pea 5

  lda.w #789
  NEW Test_object.CLS.PTR hashPtr.1 $aaaa $5555 1 2 3 4

  lda.w #789
  NEW Test_object.CLS.PTR hashPtr.2 $aaaa $5555 1 2 3 4

  pla
  pla

  lda.w #7
  CALL Test_object.testParameterReturn.MTD hashPtr.1 $aaaa $5555 1 2 3 4

  bcc +

  cpy.w #$5678
  bne +

  cpx.w #$9abc
  bne +

  pea 1234
  CALL Test_object.testParameterReturn.MTD hashPtr.1
  pla

  bcs +

  ;hash must have same id, but different id and pointer
  sep #$20
  lda hashPtr.1+oopObjHash.id
  cmp hashPtr.2+oopObjHash.id
  rep #$30
  bne +

  lda hashPtr.1+oopObjHash.count
  cmp hashPtr.2+oopObjHash.count
  beq +

  sep #$20
  lda hashPtr.1+oopObjHash.pntr
  cmp hashPtr.2+oopObjHash.pntr
  rep #$30
  beq +

  CALL Test_object.kill.MTD hashPtr.1
  CALL Test_object.kill.MTD hashPtr.2

  ; hash pointers must now be void

  sec
  rts

+
  clc
  rts

_testObject.extend:
  AX16
  pea 6
  pea 5

  lda.w #789
  SCRIPT_NEW Test_object.CLS.PTR hashPtr.1 $aaaa $5555 1 2 3 4

  lda.w #789
  SCRIPT_NEW Test_object.CLS.PTR hashPtr.2 $aaaa $5555 1 2 3 4

  pla
  pla

  lda.w #7
  SCRIPT_CALL Test_object.testParameterReturn.MTD hashPtr.1 $aaaa $5555 1 2 3 4

  bcc +

  cpy.w #$5678
  bne +

  cpx.w #$9abc
  bne +

  pea 1234
  SCRIPT_CALL Test_object.testParameterReturn.MTD hashPtr.1
  pla

  bcs +

  ;hash must have same id, but different id and pointer
  sep #$20
  lda hashPtr.1+oopObjHash.id
  cmp hashPtr.2+oopObjHash.id
  rep #$30
  bne +

  lda hashPtr.1+oopObjHash.count
  cmp hashPtr.2+oopObjHash.count
  beq +

  sep #$20
  lda hashPtr.1+oopObjHash.pntr
  cmp hashPtr.2+oopObjHash.pntr
  rep #$30
  beq +


  SCRIPT_CALL Test_object.kill.MTD hashPtr.1
  SCRIPT_CALL Test_object.kill.MTD hashPtr.2
  sec
  rts

+
  clc
  rts

_testObject.try:
  AX16
  ;rep #$31
  pea 6
  pea 5

  lda.w #789
  NEW_TRY Test_object.CLS.PTR hashPtr.1 $aaaa $5555 1 2 3 4

  lda.w #789
  NEW_TRY Test_object.CLS.PTR hashPtr.2 $aaaa $5555 1 2 3 4

  pla
  pla

  lda.w #7
  TRY Test_object.testParameterReturn.MTD hashPtr.1 $aaaa $5555 1 2 3 4

  bcc +

  cpy.w #$5678
  bne +

  cpx.w #$9abc
  bne +

  pea 1234
  TRY Test_object.testParameterReturn.MTD hashPtr.1
  pla

  bcs +

  ;hash must have same id, but different id and pointer
  sep #$20
  lda hashPtr.1+oopObjHash.id
  cmp hashPtr.2+oopObjHash.id
  rep #$30
  bne +

  lda hashPtr.1+oopObjHash.count
  cmp hashPtr.2+oopObjHash.count
  beq +

  sep #$20
  lda hashPtr.1+oopObjHash.pntr
  cmp hashPtr.2+oopObjHash.pntr
  rep #$30
  beq +

  TRY Test_object.kill.MTD hashPtr.1
  TRY Test_object.kill.MTD hashPtr.2

  ; hash pointers must now be void

  sec
  rts

+
  clc
  rts

_testObject.extend.try:
  AX16
  ;rep #$31
  pea 6
  pea 5

  lda.w #789
  SCRIPT_NEW_TRY Test_object.CLS.PTR hashPtr.1 $aaaa $5555 1 2 3 4

  lda.w #789
  SCRIPT_NEW_TRY Test_object.CLS.PTR hashPtr.2 $aaaa $5555 1 2 3 4

  pla
  pla

  lda.w #7
  SCRIPT_TRY Test_object.testParameterReturn.MTD hashPtr.1 $aaaa $5555 1 2 3 4

  bcc +

  cpy.w #$5678
  bne +

  cpx.w #$9abc
  bne +

  pea 1234
  SCRIPT_TRY Test_object.testParameterReturn.MTD hashPtr.1
  pla

  bcs +

  ;hash must have same id, but different id and pointer
  sep #$20
  lda hashPtr.1+oopObjHash.id
  cmp hashPtr.2+oopObjHash.id
  rep #$30
  bne +

  lda hashPtr.1+oopObjHash.count
  cmp hashPtr.2+oopObjHash.count
  beq +

  sep #$20
  lda hashPtr.1+oopObjHash.pntr
  cmp hashPtr.2+oopObjHash.pntr
  rep #$30
  beq +


  SCRIPT_TRY Test_object.kill.MTD hashPtr.1
  SCRIPT_TRY Test_object.kill.MTD hashPtr.2
  sec
  rts

+
  clc
  rts


_testPause:
  AX16
  pea 6
  pea 5

  lda.w #789
  NEW Test_object.CLS.PTR hashPtr.1 $aaaa $5555 1 2 3 4

  pla
  pla
  ldx #hashPtr.1
  jsr core.object.isPaused
  bcs _testPauseFail

  ldx #hashPtr.1
  jsr core.object.pause
  bcc _testPauseFail

  ldx #hashPtr.1
  jsr core.object.isPaused
  bcc _testPauseFail

  ldx #hashPtr.1
  jsr core.object.resume
  bcc _testPauseFail

  ldx #hashPtr.1
  jsr core.object.isPaused
  bcs _testPauseFail

  CALL Test_object.kill.MTD hashPtr.1
  sec
  rts

_testPauseFail:
  clc
  rts

;just a static screen test for now.
;@todo: has to be adapted for variable screen position/size later on
_testScreen:
  AX16
  ldx.w #0
  ldy.w #0
  jsr core.screen.convertAbsoluteToScreen
  bcc _testScreenFail
  cpx.w #0
  bne _testScreenFail
  cpy.w #0
  bne _testScreenFail

  ldx.w #$ff
  ldy.w #$df
  jsr core.screen.convertAbsoluteToScreen
  bcc _testScreenFail
  cpx.w #$ff
  bne _testScreenFail
  cpy.w #$df
  bne _testScreenFail

  ldx.w #$100
  ldy.w #$e0
  jsr core.screen.convertAbsoluteToScreen
  bcs _testScreenFail

  sec
  rts
  

_testScreenFail:
  clc
  rts

  CLASS Unit_test setSelf
.ends	
	
