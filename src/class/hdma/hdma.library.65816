/**
* Helpful functions for HDMA objects
*
*/

.include "src/class/hdma/hdma.library.h"
.section "hdma.library"


/**
* enable hdma with current settings, allocate channel if required
*
* @return c<bool>	true if init ok. fails if no more hdma channels left
*/
hdma.library.start:
  php
  sep #$20
  lda hdma.channel
  bit #HDMA.CHANNEL.ALLOCATED
  bne ++
	jsr core.dma_channel.allocate
	bcs +
	  ;unable to allocate channel, fail & return
	  plp
	  clc
	  rts

+	ora #HDMA.CHANNEL.ALLOCATED
	sta hdma.channel
++
  lda #TRUE
  sta hdma.isActive
  rep #$31
  jsr _makeDirty

  plp
  sec
  rts

_makeDirty:
  AX16
  lda hdma.animation.frame.current
  dec a
  sta hdma.animation.frame.last
  rts
  
/**
* disable hdma, deallocate channel
*/
hdma.library.stop:
  php
  sep #$20
  stz hdma.isActive
  jsr hdma.library.makePhysical

  lda hdma.channel
  and.b #HDMA.CHANNEL.ALLOCATED ~$ff
  sta hdma.channel
  jsr core.dma_channel.deallocate

  plp
  rts


/**
* start hdma animation
*
* @param a<int, 16bit>  animation id, @see HdmaAnimationLUT.
*
* @return c<bool>   true if init ok.
*/
hdma.library.startAnimation:
  AX16
  ;init some vars
  and.w #$ff
  sta.b hdma.animation.id
  asl a
  adc.b hdma.animation.id
  tax
  lda.l HdmaAnimationLUT,x
  sta.b hdma.animation.pointer
  lda.l HdmaAnimationLUT + 1,x
  sta.b hdma.animation.pointer + 1

  ;check animation header magic
  ldy.w #HDMA_ANIMATION.MAGIC
  lda.b [hdma.animation.pointer], y
  cmp.w #HDMA_ANIMATION.MAGIC.VALUE
  beq +
    pei (hdma.animation.id)
    TRIGGER_ERROR E_BadHdmaAnimation

+
  ;check animation type
  ldy.w #HDMA_ANIMATION.TYPE
  lda.b [hdma.animation.pointer], y
  and.w #$ff
  cmp.w #HDMA_ANIMATION.TYPE.MAX
  bcc +
    pei (hdma.animation.id)
    TRIGGER_ERROR E_BadHdmaAnimation

+
  sep #$20
  sta hdma.animation.type
  rep #$31

  ldy.w #HDMA_ANIMATION.MAX.FRAMES
  lda.b [hdma.animation.pointer], y
  sta.b hdma.animation.frame.max

  ldy.w #HDMA_ANIMATION.LOOPSTART
  lda.b [hdma.animation.pointer], y
  cmp.b hdma.animation.frame.max
  beq +
  bcc +
    pei (hdma.animation.id)
    TRIGGER_ERROR E_BadHdmaAnimation

+  
  sta.b hdma.animation.frame.loopstart

  ;fetch animation config
  lda.w #ANIMATION.FLAGS.IS_PLAYING
  tsb hdma.animation.flags

  stz.b hdma.animation.frame.current
  jsr _makeDirty

  jsr hdma.library.playAnimation
  sec
  rts

hdma.library.stopAnimation:
  AX16
  lda.w #ANIMATION.FLAGS.IS_PLAYING
  trb hdma.animation.flags
  rts


hdma.library.playAnimation:
  AX16
  sep #$20
  inc hdma.animation.timer
  rep #$31  
  lda hdma.animation.frame.current
  cmp hdma.animation.frame.last
  bne +
    jmp _advanceFramePointer

+  
  jsr _setupCurrentFrame
  jsr _advanceFramePointer

  ldx hdma.animation.frame.pointer
  lda hdma.animation.frame.pointer+2
  and.w #$ff
  jsr hdma.library.setTableAdress
  jmp hdma.library.makePhysical


hdma.library.setupCurrentFrame:
_setupCurrentFrame:
  php
  
  jsr _setupFramePointer

  plp
  rts

_setupFramePointer:
  AX16
  lda.b hdma.animation.frame.current
  sta.b hdma.animation.frame.last
  asl a
  adc.w #HDMA_ANIMATION.FRAME.POINTER
  tay
  lda.b hdma.animation.pointer+1
  sta.b hdma.animation.frame.pointer+1

  lda.b [hdma.animation.pointer],y
  clc
  adc.b hdma.animation.pointer
  sta.b hdma.animation.frame.pointer
  rts

hdma.library.advanceFramePointer:
_advanceFramePointer:
  AX16

  lda hdma.animation.flags
  bit.w #ANIMATION.FLAGS.IS_PLAYING
  beq +++

  lda.b hdma.animation.speed
  and.b hdma.animation.timer
  and.w #$ff
  bne +++

    lda.b hdma.animation.frame.current
    inc a
    cmp.b hdma.animation.frame.max
    bcc ++
      lda hdma.animation.flags
      bit.w #ANIMATION.FLAGS.IS_LOOPING
      beq +

        lda.b hdma.animation.frame.loopstart
        bra ++

+
          lda.w #ANIMATION.FLAGS.IS_PLAYING
          trb hdma.animation.flags

          lda.b hdma.animation.frame.max
          dec a

++  sta.b hdma.animation.frame.current
    
+++
  rts


/**
* set adress of current hdma source table
*
* @param a <int, 8bit>	table bank
* @param x <int, 16bit>	table adress
*/
hdma.library.setTableAdress:
  php
  rep #$31
  sep #$20
  stx.b hdma.table.adress
  sta.b hdma.table.adress + 2
  plp
  rts


/**
* write hdma channel settings to hardware registers
*
* before changing registers, channel must be switched off!
*/
hdma.library.makePhysical:
  php
  rep #$31
  jsr core.nmi.stop
  lda hdma.isActive
  and.w #$ff
  bne +
  	;disable hardware hdma channel
  	jsr _disableChannel
    jsr core.nmi.start
    plp
  	rts

+
  jsr _getChannelRegisterBase

  lda hdma.table.adress
  sta.w GLOBAL.DMA_BUFFER.DMASRCL,x

  lda hdma.table.adress + 1
  sta.w GLOBAL.DMA_BUFFER.DMASRCH,x

  sep #$20
  lda hdma.flags
  sta.w GLOBAL.DMA_BUFFER.DMAP,x

  lda hdma.target
  sta.w GLOBAL.DMA_BUFFER.DMADEST,x

  lda hdma.indirect.bank
  sta.w GLOBAL.DMA_BUFFER.DMALENB,x

  jsr _enableChannel
  jsr core.nmi.start
  plp
  rts

_disableChannel:
  php
  sep #$20
  jsr _getChannelBitflag
  eor.b #$ff
  and.w GLOBAL.HDMA.CHANNEL.ENABLE
  sta.w GLOBAL.HDMA.CHANNEL.ENABLE
  
  ;immediate disable, prevent stray writes when rewriting register
  jsr _getChannelBitflag
  eor.b #$ff
  pha
  lda.w GLOBAL.HDMA.CHANNEL.ENABLE.CURRENT
  and 1,s
  sta.l HDMAEN
  sta.w GLOBAL.HDMA.CHANNEL.ENABLE.CURRENT

  jsr _getChannelRegisterBase

  lda.b #0
  sta.w GLOBAL.DMA_BUFFER.DMAP,x

  pla
  plp
  rts

_enableChannel:
  php
  sep #$20
  jsr _getChannelBitflag
  ora.w GLOBAL.HDMA.CHANNEL.ENABLE
  sta.w GLOBAL.HDMA.CHANNEL.ENABLE
  plp
  rts

_getChannelBitflag:
  php
  rep #$31
  lda hdma.channel
  and.w #HDMA.CHANNEL.ALLOCATED ~$ff
  tax
  lda.l dmaBitflagLut,x
  and.w #$ff
  plp
  rts

_getChannelRegisterBase:
  php
  rep #$31
  lda hdma.channel
  and.w #HDMA.CHANNEL.ALLOCATED ~$ff
  asl a
  asl a
  asl a
  asl a
  tax
  plp
  rts

/**
* allocates ram buffer for dynamic hdma effects
*
*/
hdma.library.allocateBuffer:
  AX16
  ldx hdma.ramBuffer.length
  jsr core.wram.allocate
  bcs +
	pei (hdma.ramBuffer.length)
    TRIGGER_ERROR E_OutOfWram


+ stx.b hdma.ramBuffer.start
  sep #$20
  sta.b hdma.ramBuffer.id
  rep #$31
  rts

hdma.library.deallocateBuffer:
  AX16
  lda.b hdma.ramBuffer.id
  and.w #$ff
  beq +
	 jsl extend.wram.deallocate

+
  rts


/**
* allocate ram for table, then upload table there and set hdma pointer accordingly
*
* @param x<int, 8bit>   table length
*/
hdma.library.uploadRomTable:
  AX16
  stx hdma.ramBuffer.length
  jsr hdma.library.allocateBuffer

  jsr _uploadRomTable

  lda.w #GLOBAL.wramBuffer.start
  clc
  adc hdma.ramBuffer.start
  tax
  sep #$20
  lda #RAM
  jsr hdma.library.setTableAdress
  rep #$31
  rts


_uploadRomTable:
  php
  rep #$31
  sep #$20
  ldy #0
  ldx hdma.ramBuffer.start
-   lda [hdma.table.adress],y
    sta.w GLOBAL.wramBuffer.start,x
    iny
    inx
    cpy hdma.ramBuffer.length
    bcc -

  plp
  rts

hdma.library.disable:
  jmp hdma.library.stop

hdma.library.enable:
  jmp hdma.library.start

hdma.library.kill:
  AX16
  jsr hdma.library.stop
  jmp object.library.kill

hdma.library.isDone:
  AX16  
  lda hdma.animation.flags
  bit.w #ANIMATION.FLAGS.IS_PLAYING
  beq +
    clc
    rts

+
  sec
  rts

hdma.library.setFrame:
  AX16
  ldy.w #ANIMATION.MAX.FRAMES
  cmp.b [hdma.animation.pointer], y  
  beq +
  bcc +
    pei (hdma.animation.id)
    TRIGGER_ERROR E_IndexError

+      
  sta.b hdma.animation.frame.current
  lda.w #ANIMATION.FLAGS.IS_PLAYING
  tsb hdma.animation.flags  
  rts


.ends
