/**
* Prints strings
*
*/

.include "src/core/string.h"
.section "core.string"	

core.string.init:
  AX16
  sep #$20
  lda #STRING.LANGUAGE.DEFAULT
  sta.w GLOBAL.CORE.STRING.language
  rep #$31
  lda.w #VOID
  sta.w GLOBAL.CORE.STRING.sprite
  lda.w #$1234
  sta.w GLOBAL.CORE.STRING.dummy.1
  sta.w GLOBAL.CORE.STRING.dummy.2
  rts


core.string.killSprite:
  AX16
  TRY sprite.generic.kill.MTD GLOBAL.CORE.STRING.sprite
  rts

/**
* print string
*
* @param a<int,8bit>	string pointer id (@see TextstringLUT)
*/
core.string.parse:
  php
  phb
  phd
  pea directPage.static.string
  pld
  pea RAM << 8
  plb
  plb
  rep #$31
  pha
  lda.w GLOBAL.CORE.STRING.dummy.1
  cmp.w #$1234
  beq +
    TRIGGER_ERROR E_ValueError
+  
  lda.w GLOBAL.CORE.STRING.dummy.2
  cmp.w #$1234
  beq +
    TRIGGER_ERROR E_ValueError
+  
  pla
  jsl extend.string.strPointer

  lda 7,s	;get (optional) arguments
  sta.w GLOBAL.CORE.STRING.argument.0
  lda 9,s
  sta.w GLOBAL.CORE.STRING.argument.1
  lda 11,s
  sta.w GLOBAL.CORE.STRING.argument.2
  lda 13,s
  sta.w GLOBAL.CORE.STRING.argument.3
  lda 15,s
  sta.w GLOBAL.CORE.STRING.argument.4
  lda 17,s
  sta.w GLOBAL.CORE.STRING.argument.5
  lda 19,s
  sta.w GLOBAL.CORE.STRING.argument.6
  lda 21,s
  sta.w GLOBAL.CORE.STRING.argument.7
  lda 23,s
  sta.w GLOBAL.CORE.STRING.argument.8
  lda 25,s
  sta.w GLOBAL.CORE.STRING.argument.9
  jsr _PrintLoop
  pld
  plb
  plp
  rts


/**
* print string, this is just a hack to be able to call object methods which in turn call this (parameters on stack are at different position)
*
* @param a<int,8bit>    string pointer id (@see TextstringLUT)
*/
core.string.parse_from_object:
  php
  phb
  phd
  pea directPage.static.string
  pld
  pea RAM << 8
  plb
  plb
  rep #$31
  ;and #$ff
  jsl extend.string.strPointer

  ;get (optional) arguments
  .def _STACK_OFFSET = 6
  lda OBJECT.CALL.ARG.1 +_STACK_OFFSET,s
  sta.w GLOBAL.CORE.STRING.argument.0
  lda OBJECT.CALL.ARG.2 +_STACK_OFFSET,s
  sta.w GLOBAL.CORE.STRING.argument.1
  lda OBJECT.CALL.ARG.3 +_STACK_OFFSET,s
  sta.w GLOBAL.CORE.STRING.argument.2
  lda OBJECT.CALL.ARG.4 +_STACK_OFFSET,s
  sta.w GLOBAL.CORE.STRING.argument.3
  lda OBJECT.CALL.ARG.5 +_STACK_OFFSET,s
  sta.w GLOBAL.CORE.STRING.argument.4
  lda OBJECT.CALL.ARG.6 +_STACK_OFFSET,s
  sta.w GLOBAL.CORE.STRING.argument.5
  lda OBJECT.CALL.ARG.7 +_STACK_OFFSET,s
  sta.w GLOBAL.CORE.STRING.argument.6
  lda OBJECT.CALL.ARG.8 +_STACK_OFFSET,s
  sta.w GLOBAL.CORE.STRING.argument.7

  ;unsupported in this context, wla dx only allows for 9 macro arguments total
  stz.w GLOBAL.CORE.STRING.argument.8
  stz.w GLOBAL.CORE.STRING.argument.9
  jsr _PrintLoop
  pld
  plb
  plp
  rts

core.string.reset:
  php
  phb
  phd
  pea directPage.static.string
  pld
  pea RAM << 8
  plb
  plb
  rep #$31
  ldx #0
  ldy #0
  jsl extend.string.setPosition
  ;clear string screen buffer
  lda #WRAM.CLEAR_PATTERN.STRING
  ldy.w #GLOBAL.CORE.STRING.buffer.length
  ldx.w #GLOBAL.CORE.STRING.buffer
  jsr ClearWRAM

  lda.w #GLOBAL.CORE.STRING.FONT.SIZE.X
  sta static.string.font.size.x
  lda.w #GLOBAL.CORE.STRING.FONT.SIZE.Y
  sta static.string.font.size.y

  lda #core.string.print.default.CLB
  ldx #VOID
  ldy #VOID
  jsr core.string.registerCallback

  pld
  plb
  plp
  rts

/**
* set current position on screen, wrapper for external calls
*
* @param x<int, 8bit>    x-position in pixels (floored to tile resolution)
* @param y<int, 8bit>    y-position in pixels (floored to tile resolution)
*/
core.string.setPosition:
  php
  phb
  phd
  pea directPage.static.string
  pld
  pea RAM << 8
  plb
  plb
  rep #$31

  jsl extend.string.setPosition

  pld
  plb
  plp
  rts




/**
* register callback used for rendering textstring to screen
* because 8x8 fwf, 16x16fwf, vwf all use wildly different ways to convert chars to graphics, rendering can be handled by arbitrary callbacks (or default one if none is set)
*
* @param a <int 16bit>   adress of string render callback routine
* @param x,y <int, 32bit>   pointer to object representing caller context
*/
core.string.registerCallback:
  php
  phb
  phd
  pea directPage.static.string
  pld
  pea RAM << 8
  plb
  plb
  rep #$31

  stx static.string.render.context
  sty static.string.render.context+2

  tax
  lda.l (ROM << 16),x
  cmp #CALLBACK_MAGIC
  beq +
    TRIGGER_ERROR E_BadCallback

+
  ;register callback routine
  inx
  inx
  txa
  sta static.string.render.callback

  pld
  plb
  plp
  rts


  CALLBACK core.string.print.default
    php
    rep #$31
    pha
    ldy #0    
-
        ;get y-pos, divide by 8 to get tileposition
        lda static.string.cursor.position.y
        lsr a
        lsr a
        lsr a

        ;multiply by 32 to get byte position in buffer
        asl a
        asl a
        asl a
        asl a
        asl a
        sta 1,s

        ;get x-pos, divide by 8 to get tileposition
        lda static.string.cursor.position.x
        and.w #$ff
        lsr a
        lsr a
        lsr a

        ;add y-pos to get total byte position in buffer
        clc
        adc 1,s
        tax

        lda [static.string.current.pointer],y
        and #$ff
        cmp #' '  ;lower than whitespace??
        bcs _TilemapPrint
            jsl extend.string.printCommand
        bcs +
        bra -

        _TilemapPrint:
            ;don't exceed buffer, also we cant raise errors here!
            cpx.w #GLOBAL.CORE.STRING.buffer.length
            bcs ++
              sep #$20
              sta.w GLOBAL.CORE.STRING.buffer,x
              rep #$31

++
            lda static.string.cursor.position.x
            clc
            adc.w #GLOBAL.CORE.STRING.FONT.SIZE.X
            sta static.string.cursor.position.x
            ;abort if we're shooting beyond right screen border
            cmp.w #GLOBAL.CORE.STRING.SCREEN.SIZE.X
            bcs +
              iny
              bra -

+
    pla
    plp
    rts

;print string
_PrintLoop:
    php
    rep #$31

    ;jump to registered callback if valid
    lda static.string.render.callback
    tax
    dex
    dex
    lda.l (ROM << 16),x
    cmp #CALLBACK_MAGIC
    beq +
      TRIGGER_ERROR E_BadIrqCallback

+
    lda static.string.render.callback
    dec a
    pea _return-1   ;push return adress
    pha ;push callback adress
    rts ;this is actually a jump to subroutine on stack, then return

_return:

    plp
    rts

    
;puts 16bit a string pointer into tmp, 3 bytes
extend.string.strPointer:
    php
    rep #$31
    pha
    phy
    cmp #text.max.id
    bcc +
      _stringIdInvalid:
      lda.w #text.max.id	;error condition, but we can't raise it with current exception printer!
+
    sta 1,s
    asl a
    clc
    adc 1,s
    tay

    lda.w GLOBAL.CORE.STRING.language
    and.w #$ff
    cmp #LANGUAGE.MAX
    bcc +
      TRIGGER_ERROR E_Todo
+
    sta 1,s
    asl a
    clc
    adc 1,s
    tax
    lda.l text.language.lut,x
    sta static.string.current.pointer
    lda.l text.language.lut+1,x
    sta static.string.current.pointer+1

    lda.b [static.string.current.pointer],y
    pha
    iny
    lda.b [static.string.current.pointer],y
    sta static.string.current.pointer+1
    pla
    sta static.string.current.pointer

    ply
    pla
    plp
    rtl	

;sets vram adress to a/2	
extend.string.setPosition:
  .accu 16
  .index 16
  txa
  and.w #$ff
  sta static.string.cursor.position.x
  sta static.string.cursor.margin.left
  tya
  and.w #$ff
  sta static.string.cursor.position.y
  rtl


extend.string.printCommand:
    .accu 16
    cmp.w #TC_max+1
    bcs +	;this is an error, but we can hardly raise it because the error itself would be printed as a string
      asl a
      tax
      jsr (ExcStrCmdLut,x)	;get pointer to subroutine

+
    rtl


ExcStrCmdLut:
    PTRNORM ExcStrCmdLut SUB_TC_end
    PTRNORM ExcStrCmdLut SUB_TC_sub
    PTRNORM ExcStrCmdLut SUB_TC_iSub
    PTRNORM ExcStrCmdLut SUB_TC_dSub
    PTRNORM ExcStrCmdLut SUB_TC_diSub
    PTRNORM ExcStrCmdLut SUB_TC_pos
    PTRNORM ExcStrCmdLut SUB_TC_brk
    PTRNORM ExcStrCmdLut SUB_TC_hToS
    PTRNORM ExcStrCmdLut SUB_TC_dToS
    PTRNORM ExcStrCmdLut SUB_TC_sprite


SUB_TC_end:
    sec
    rts
    
;recursively goto substring, input: number of textstring pointer, 2 bytes
SUB_TC_sub:
    lda static.string.current.pointer	;push current string pointer to stack
    pha
    lda static.string.current.pointer+2
    pha
    iny
    phy			;push current string counter to stack	

    lda [static.string.current.pointer],y	;get argument, substring to load
    jsl extend.string.strPointer
    jsr _PrintLoop

    ply		;restore original string status
    iny		;goto next string char
    iny
    pla
    sep #$20
    sta static.string.current.pointer+2
    rep #$31
    pla
    sta static.string.current.pointer
    clc
    rts

;recursively goto substring, indirect.(input: 16bit pointer to 16bit str_pointer_number in bank $7e.)	
SUB_TC_iSub:
    lda static.string.current.pointer	;push current string pointer to stack
    pha
    lda static.string.current.pointer+2
    pha
    iny
    phy			;push current string counter to stack	

    phb
    sep #$20
    lda #RAM
    pha
    plb
    rep #$31
    lda [static.string.current.pointer],y ;get argument, pointer to substring to load
    tax
    lda.l RAM << 16,x
    plb
    
    jsl extend.string.strPointer	
    jsr _PrintLoop

    ply		;restore original string status
    iny
    iny		;goto next string char
    pla
    sep #$20
    sta static.string.current.pointer+2
    rep #$31
    pla
    sta static.string.current.pointer
    clc
    rts

;recursively goto substring, direct 24bit pointer to arbitrary string	
SUB_TC_dSub:
    lda static.string.current.pointer	;push current string pointer to stack
    pha
    lda static.string.current.pointer+2
    pha
    iny
    phy			;push current string counter to stack	

    lda [static.string.current.pointer],y ;get argument, pointer to substring to load
    pha
    iny
    lda [static.string.current.pointer],y
    sta static.string.current.pointer+1
    pla
    sta static.string.current.pointer

    jsr _PrintLoop

    ply		;restore original string status
    iny
    iny
    iny		;goto next string char
    pla
    sep #$20
    sta static.string.current.pointer+2
    rep #$31
    pla
    sta static.string.current.pointer
    clc
    rts

;recursively goto substring, indirect 16bit pointer to 24bit pointer to arbitrary string	
SUB_TC_diSub:
    lda static.string.current.pointer	;push current string pointer to stack
    pha
    lda static.string.current.pointer+2
    pha
    iny
    phy			;push current string counter to stack	

    phb
    sep #$20
    lda #RAM
    pha
    plb
    rep #$31
    lda [static.string.current.pointer],y ;get argument, pointer to substring-pointer to load
    tax
    lda.l RAM << 16,x
    sta static.string.current.pointer
    inx
    lda.l RAM << 16,x
    sta static.string.current.pointer+1
    plb

    jsr _PrintLoop

    ply		;restore original string status
    iny
    iny		;goto next string char
    pla
    sep #$20
    sta static.string.current.pointer+2
    rep #$31
    pla
    sta static.string.current.pointer
    clc
    rts

;set new screen position to write to
SUB_TC_pos:
    iny
    phx

    lda [static.string.current.pointer],y ;get argument, new position
    tax
    iny
    lda [static.string.current.pointer],y ;get argument, new position
    phy
    tay
    jsl extend.string.setPosition

    ply
    plx
    iny
    clc
    rts
    
SUB_TC_brk:
    phx
    phy

    lda static.string.cursor.position.y
    clc
    adc static.string.font.size.y
    sta static.string.cursor.position.y
    tay
    ldx static.string.cursor.margin.left
    jsl extend.string.setPosition

    ply
    plx
    iny		;goto next char
    clc
    rts	

;print decimal value. arg0: 24bit pointer to adress of hex value. arg1=length	in bytes(masked to $1f)
SUB_TC_dToS:
    lda static.string.current.pointer	;push current string pointer to stack
    pha
    lda static.string.current.pointer+2
    pha
    iny
    phy			;push current string counter to stack	

    lda [static.string.current.pointer],y ;get argument, pointer to word to print
    sta static.string.substring.pointer
    iny
    lda [static.string.current.pointer],y	;offfset high byte+bank
    sta static.string.substring.pointer+1
    iny
    iny
    lda [static.string.current.pointer],y	;length
    and #$7
    sta static.string.substring.length

    jsr _convertToDecimal
    jsr PrintHexToStack

    ply		;restore original string status
    iny
    iny
    iny
    iny		;goto next string char
    pla
    sep #$20
    sta static.string.current.pointer+2
    rep #$31
    pla
    sta static.string.current.pointer
    clc
    rts

;display sprite. arg0: 16bit sprite animation id, arg1: 8 bit sprite x pos, arg2: 8 bit sprite y pos,
SUB_TC_sprite:
  phy
  jsr core.string.killSprite
  ply

  .redef SPRITE_FLAGS (ANIMATION.FLAGS.POSITION_ABSOLUTE | ANIMATION.FLAGS.IS_LOOPING | ANIMATION.FLAGS.PRIORITY_MAX)

  iny

  phy
  pea SPRITE_FLAGS
  pea $3
  lda [static.string.current.pointer],y ;get sprite
  pha

  iny
  iny
  iny
  lda [static.string.current.pointer],y ;get y-pos
  and.w #$ff
  pha
  dey
  lda [static.string.current.pointer],y ;get x-pos
  and.w #$ff
  pha
  SCRIPT_NEW_TRY sprite.generic.CLS.PTR GLOBAL.CORE.STRING.sprite
  pla
  pla
  pla
  pla
  pla

  ply
  iny   ;goto next char
  iny
  iny
  iny
  clc
  rts


;print decimal, 16bit only :(
_convertToDecimal:
  .INDEX 16
  rep #$31
  
  ldy #0
  stz.b static.string.substring.buffer
  stz.b static.string.substring.buffer+2

  lda [static.string.substring.pointer],y
  ;convert one byte from hex to decimal
  tax
  lda #0
  clc
  php
  sed

-	adc #1
    bcc +
      pha
      lda.b static.string.substring.buffer+2
      adc #0
      sta.b static.string.substring.buffer+2
      pla
+	dex
    cpx.w #$ffff
    bne -

  sec
  sbc #1
  sta.b static.string.substring.buffer
  plp

  
  ;setup string pointer
  tdc
  adc.w #static.string.substring.buffer
  stz static.string.substring.pointer+1
  sta static.string.substring.pointer
  rts


;print hex value. arg0: 24bit pointer to adress of hex value. arg1=length	in bytes(masked to $1f)
SUB_TC_hToS:
    lda static.string.current.pointer	;push current string pointer to stack
    pha
    lda static.string.current.pointer+2
    pha
    iny
    phy			;push current string counter to stack	

    lda [static.string.current.pointer],y ;get argument, pointer to word to print
    sta static.string.substring.pointer
    iny
    lda [static.string.current.pointer],y	;offfset high byte+bank
    sta static.string.substring.pointer+1
    iny
    iny
    lda [static.string.current.pointer],y	;length
    and #$1f
    asl a				;*2, nibbles to print
    sta static.string.substring.length

    jsr PrintHexToStack

    ply		;restore original string status
    iny
    iny
    iny
    iny		;goto next string char
    pla
    sep #$20
    sta static.string.current.pointer+2
    rep #$31
    pla
    sta static.string.current.pointer
    clc
    rts

PrintHexToStack:
    tsc			;get stack pointer, use as pointer for string
    sta static.string.current.stack	;store stack buffer because we're going to break the stack
    pea TC_end		;push string terminator
    ldy #0
    PrintHexToStackLoop:
        phy
        tya
        lsr a
        tay
        lda [static.string.substring.pointer],y
        bcc PrintHexToStackLo
            and #$f0	;get high nibble
            lsr a
            lsr a
            lsr a
            lsr a
            bra PrintNibbleToStack
            
        PrintHexToStackLo:
            and #$0f				;get low nibble

        PrintNibbleToStack:
        ply
        clc
        adc #'0'	;shift to ASCII range
        cmp #'9'+1
        bcc PrintNibbleNoChar
            adc #8-2	;shift into upper case letter range(-1 because of set carry, another -1 cause we're comparing '9'+1)
        PrintNibbleNoChar:
        sep #$20
        pha		;print to stack
        rep #$31
        iny
        cpy static.string.substring.length
        bcc PrintHexToStackLoop
    
    stz static.string.current.pointer+1	;save string pointer
    tsc
    inc a			;+1 because stack always points to next stack-slot
    sta static.string.current.pointer
    jsr _PrintLoop

    lda static.string.current.stack	;restore stack
    tcs	
    rts

extend.string.getPosition:
  php
  phb
  phd
  pea directPage.static.string
  pld
  pea RAM << 8
  plb
  plb
  rep #$31

  ldx static.string.cursor.position.x
  ldy static.string.cursor.position.y

  pld
  plb
  plp
  rtl


.ends
